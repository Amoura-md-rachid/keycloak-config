name: Spring Boot CI/CD Pipeline v2

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package

      - name: Run tests
        run: mvn test

      - name: Build Docker image
        run: docker build -t my-spring-app .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to Docker Hub
        run: |
          docker tag my-spring-app ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          # Écrit la clé privée dans un fichier sécurisé
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
  
          # Debug: Affiche les premières lignes de la clé privée (sans révéler le contenu complet)
          head -n 1 private_key
  
          # Debug: Vérifier la connectivité
          echo "Vérification de la connectivité à $HOST"
          nc -zv $HOST 22
  
          # Debug: Afficher les informations de l'hôte SSH
          ssh-keyscan $HOST
  
          # Tentative de connexion SSH avec débogage verbeux
          echo "Tentative de connexion SSH..."
          ssh -v -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "echo 'Connexion SSH réussie'"
  
          # Si la connexion réussit, exécuter les commandes Docker
          if [ $? -eq 0 ]; then
            echo "Exécution des commandes Docker..."
            ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "
              sudo docker pull ${DOCKERHUB_USERNAME}/my-spring-app:${{ github.sha }} &&
              sudo docker stop my-spring-app || true &&
              sudo docker rm my-spring-app || true &&
              sudo docker run -d --name my-spring-app -p 8081:8081 ${DOCKERHUB_USERNAME}/my-spring-app:${{ github.sha }}
            "
          else
            echo "Échec de la connexion SSH"
            exit 1
          fi
